/**
  ******************************************************************************
  * @file    main.c
  * @author  Microcontroller Division
  * @version V1.1.2
  * @date    September 2011
  * @brief   Main program body
  ******************************************************************************
  * @copy
  *
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  *
  * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  */
 
/* Includes ------------------------------------------------------------------*/

/* Standard STM32L1xxx driver headers */
//#include "misc.h"
//#include "stm32l1xx_adc.h"
//#include "stm32l1xx_lcd.h"
//#include "stm32l1xx_rcc.h"
//#include "stm32l1xx_rtc.h"
//#include "stm32l1xx_exti.h"
//#include "stm32l1xx_pwr.h"
//#include "stm32l1xx_syscfg.h"
//#include "stm32l1xx_dbgmcu.h"

/* Touch sensing driver headers */
#include "stm32_tsl_api.h"
//#include "stm32l15x_tsl_ct_acquisition.h"

/* discovery board and specific drivers headers*/
#include "discover_board.h"
//#include "icc_measure.h"
#include "discover_functions.h"
#include "stm32l_discovery_lcd.h"
//#include "stm32_tsl_timebase.h"
/* aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa*/

#include "stm32l1xx.h"
//#define KeyPressed TRUE
#define DELAY Delay(1500)
#define TEMPO if(LEDState == 0x00) DELAY
/** @addtogroup STM32L1xx_StdPeriph_Examples
  * @{
  */

/** @addtogroup SysTick_Example
  * @{
  */ 

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/*__IO uint32_t LEDState = 0x00;
static __IO uint32_t TimingDelay;
EXTI_InitTypeDef   EXTI_InitStructure;
GPIO_InitTypeDef   GPIO_InitStructure;
NVIC_InitTypeDef   NVIC_InitStructure;*/

/* Private function prototypes -----------------------------------------------*/
/*void Delay(__IO uint32_t nTime);
void EXTI0_Config(void);*/
extern uint8_t t_bar[2];  
__IO uint32_t LEDState = 0x00;
static __IO uint32_t TimingDelay;
EXTI_InitTypeDef   EXTI_InitStructure;
GPIO_InitTypeDef   GPIO_InitStructure;
NVIC_InitTypeDef   NVIC_InitStructure;

/* Private function prototypes -----------------------------------------------*/
void Delay(__IO uint32_t nTime);
void EXTI0_Config(void);
/* Private functions ---------------------------------------------------------*/

/**
  * @brief   Main program
  * @param  None
  * @retval None
  */
void TurnOn(int j )
{
  if (LEDState == 0x00){
    if (j<1) 
    LCD_GLASS_ScrollSentence("      ** DAYTIME MODE **",1,SCROLL_SPEED);
  GPIO_HIGH(GPIO_D,LED_G2_3);
  GPIO_HIGH(CTN_GPIO_PORT ,LED_R1_4);
  GPIO_LOW(GPIO_A,LED_G1_4);
  GPIO_LOW(GPIO_A,LED_R2_3);
  GPIO_LOW(GPIO_B,LED_O1_4);
  GPIO_LOW(GPIO_B,LED_O2_3);
  Delay(8000); }
  if (LEDState == 0x00) {
    GPIO_LOW(GPIO_D,LED_G2_3);
  GPIO_HIGH(CTN_GPIO_PORT ,LED_R1_4);
  GPIO_HIGH(GPIO_B,LED_O2_3);
  GPIO_LOW(GPIO_A,LED_G1_4);
  GPIO_LOW(GPIO_A,LED_R2_3);
  GPIO_LOW(GPIO_B,LED_O1_4);
  
  Delay(1500);}

}
void TurnOff(){
  if (LEDState == 0x00){
     
 GPIO_LOW(GPIO_D,LED_G2_3);
  GPIO_LOW(CTN_GPIO_PORT ,LED_R1_4);
  GPIO_HIGH(GPIO_A,LED_G1_4);
  GPIO_HIGH(GPIO_A,LED_R2_3);
  GPIO_LOW(GPIO_B,LED_O1_4);
  GPIO_LOW(GPIO_B,LED_O2_3);
  }
  Delay(8000); 
   if (LEDState == 0x00)
   {  
  GPIO_LOW(GPIO_D,LED_G2_3);
  GPIO_LOW(CTN_GPIO_PORT ,LED_R1_4);
  GPIO_LOW(GPIO_A,LED_G1_4);
  GPIO_HIGH(GPIO_A,LED_R2_3);
  GPIO_HIGH(GPIO_B,LED_O1_4);
  GPIO_LOW(GPIO_B,LED_O2_3);
  Delay(1500);}
}
int j=0;
void nightmode(){ 
  int i=0;
  while(1 && LEDState == 0x01){ 
    if(i<1){
   LCD_GLASS_ScrollSentence("      ** NIGHT MODE **",1,SCROLL_SPEED);
    i++;
    j=0;
    }
  GPIO_LOW(GPIO_D,LED_G2_3);
  GPIO_LOW(CTN_GPIO_PORT ,LED_R1_4);
  GPIO_LOW(GPIO_A,LED_G1_4);
  GPIO_LOW(GPIO_A,LED_R2_3);
  GPIO_HIGH(GPIO_B,LED_O1_4);
  GPIO_HIGH(GPIO_B,LED_O2_3);
   Delay(500);
    GPIO_LOW(GPIO_D,LED_G2_3);
  GPIO_LOW(CTN_GPIO_PORT ,LED_R1_4);
  GPIO_LOW(GPIO_A,LED_G1_4);
  GPIO_LOW(GPIO_A,LED_R2_3);
  GPIO_LOW(GPIO_B,LED_O1_4);
  GPIO_LOW(GPIO_B,LED_O2_3);
   Delay(1200);
  
  }}
/*bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb*/
/* Private variables ---------------------------------------------------------*/
//static volatile uint32_t TimingDelay; //Nécessaire
//extern unsigned char Bias_Current;    /* Bias Current stored in E²Prom used for ICC mesurement precision */
//extern uint8_t t_bar[2];              /* LCD bar graph: used for displaying active function */
extern bool Auto_test;                /* Auto_test activation flag: set by interrupt handler if user button is pressed for a few seconds */
//extern bool Idd_WakeUP;               /* */
//extern volatile bool KeyPressed;      /* */
//extern bool UserButton;               /* Set by interrupt handler to indicate that user button is pressed */ 
uint8_t state_machine;                /* Machine status used by main() wich indicats the active function, set by user button in interrupt handler */
//uint16_t Int_CurrentSTBY;             /* */


/*******************************************************************************/
/**
  * @brief main entry point.
  * @par Parameters None
  * @retval void None
  * @par Required preconditions: None
  */
int main(void)
{ 
  
  /* Enable GPIOs clock */ 	
  RCC_AHBPeriphClockCmd(LD_GPIO_PORT_CLKA | USERBUTTON_GPIO_CLK| LD_GPIO_PORT_CLKB |  CTN_GPIO_CLKC | LD_GPIO_PORT_CLKD , ENABLE);
 
/* Configure the GPIO_LED pins  LED_G1_4  |LED_R2_3| LED_O2_3 |LED_O1_4*/
GPIO_InitStructure.GPIO_Pin = LED_G1_4  |LED_R2_3| LED_O2_3 |LED_O1_4 ;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIO_A, &GPIO_InitStructure);
 
    GPIO_InitStructure.GPIO_Pin =LED_O2_3 |LED_O1_4 ;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIO_B, &GPIO_InitStructure);
  
      GPIO_InitStructure.GPIO_Pin =LED_G2_3  ;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIO_D, &GPIO_InitStructure);;
 
   GPIO_InitStructure.GPIO_Pin = CTN_CNTEN_GPIO_PIN | LED_R1_4 ; 
 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(CTN_GPIO_PORT, &GPIO_InitStructure);
 
  
  
 /*!< At this stage the microcontroller clock setting is already configured, 
       this is done through SystemInit() function which is called from startup
       file (startup_stm32l1xx_md.s) before to branch to application main.
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32l1xx.c file
     */ 
  
  
  /* Check if the StandBy flag is set */

  
  /* Configure Clocks for Application need */
  RCC_Configuration();
  
  
  /* Wait Until the Voltage Regulator is ready */
  while (PWR_GetFlagStatus(PWR_FLAG_VOS) != RESET) ;
  
  /* Init I/O ports */
  Init_GPIOs();
  
  /* Initializes ADC */
  //ADC_Icc_Init();
  
  /* Enable General interrupts */
  enableInterrupts();	
  
  /* Init Touch Sensing configuration */  
  TSL_Init();//necessaire
  

 
  /* Initializes the LCD glass */
  LCD_GLASS_Init();
        
  

   
    /* Reset autotest flag stored in memory */
    AUTOTEST(FALSE) ;
    /* Display Welcome message */ 
    LCD_GLASS_ScrollSentence("      ** OUSSAMA AND RIADH **",1,SCROLL_SPEED);
  
  
       /* if welcome message not skipped Display blinking message JP1 ON*/
      LCD_BlinkConfig(LCD_BlinkMode_AllSEG_AllCOM,LCD_BlinkFrequency_Div512);
      LCD_GLASS_DisplayString(" 2SE02");
      TEMPO;
      TEMPO;
      TEMPO;
      TEMPO;
      LCD_BlinkConfig(LCD_BlinkMode_Off,LCD_BlinkFrequency_Div32);	
   
      
      /************************************************/
      
        if (SysTick_Config(SystemCoreClock / 1000))
  { 
    /* Capture error */ 
    while (1);
  }
      
      /***********************************************/
      
      
      
      
      
      
  /* Wake up from Standby or autotest */
    while (1)
  {

  

 TurnOn(j);
j++; 
 TurnOff(); 
   
   nightmode();
    }
  /* Reset KeyPress Flag */
   
  
 
}		

/**
  * @brief  Configures the different system clocks.
  * @param  None
  * @retval None
  */
void RCC_Configuration(void)
{  
  /* Enable HSI Clock */
  RCC_HSICmd(ENABLE);
  
  /*!< Wait till HSI is ready */
  while (RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);

  /* Set HSI as sys clock*/
  RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);
  
  /* Set MSI clock range to ~4.194MHz*/
  RCC_MSIRangeConfig(RCC_MSIRange_6);
  
  /* Enable the GPIOs clocks */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC| RCC_AHBPeriph_GPIOD| RCC_AHBPeriph_GPIOE| RCC_AHBPeriph_GPIOH, ENABLE);     

  /* Enable comparator, LCD and PWR mngt clocks */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_COMP | RCC_APB1Periph_LCD | RCC_APB1Periph_PWR,ENABLE);
    
  /* Enable ADC & SYSCFG clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_SYSCFG , ENABLE);

  /* Allow access to the RTC */
  PWR_RTCAccessCmd(ENABLE);

  /* Reset RTC Backup Domain */
  RCC_RTCResetCmd(ENABLE);
  RCC_RTCResetCmd(DISABLE);

  /* LSE Enable */
  RCC_LSEConfig(RCC_LSE_ON);

  /* Wait until LSE is ready */
  while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET);
  
   /* RTC Clock Source Selection */ 
  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE); 
  
  /* Enable the RTC */
  RCC_RTCCLKCmd(ENABLE);   
  
  /*Disable HSE*/
  RCC_HSEConfig(RCC_HSE_OFF);
  if(RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET )
  {
    /* Stay in infinite loop if HSE is not disabled*/
    while(1); 
  }
}

/**
  * @brief  To initialize the I/O ports
  * @caller main
  * @param None
  * @retval None
  */
void  Init_GPIOs (void)
{
  /* GPIO, EXTI and NVIC Init structure declaration */
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
  
 


  /* Configure EXT1 Line 0 in interrupt mode trigged on Rising edge */
  
  EXTI_InitStructure.EXTI_Line = EXTI_Line0 ;  // PA0 for User button AND IDD_WakeUP
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
  EXTI_Init(&EXTI_InitStructure);

  /* Enable and set EXTI0 Interrupt to the lowest priority */
  NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn ;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority =0x00 ;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure); 

  /* Configure the LED_pin as output push-pull for LD3 & LD4 usage*/

  
  /* Force a low level on LEDs*/ 
  
    
/* Counter enable: GPIO set in output for enable the counter */
 /* GPIO_InitStructure.GPIO_Pin = CTN_CNTEN_GPIO_PIN;
  GPIO_Init( CTN_GPIO_PORT, &GPIO_InitStructure);*/
  
/* To prepare to start counter */
  GPIO_HIGH(CTN_GPIO_PORT,CTN_CNTEN_GPIO_PIN);
      
/* Configure Port A LCD Output pins as alternate function */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10 |GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOA, &GPIO_InitStructure);
  
/* Select LCD alternate function for Port A LCD Output pins */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource1,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource8,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource9,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource10,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource15,GPIO_AF_LCD) ;  
  
  /* Configure Port B LCD Output pins as alternate function */ 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_9 \
                                 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;  
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOB, &GPIO_InitStructure);
  
  /* Select LCD alternate function for Port B LCD Output pins */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource3,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource4,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11,GPIO_AF_LCD) ;  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource12,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource13,GPIO_AF_LCD) ;   
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource14,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource15,GPIO_AF_LCD) ;   
  
  /* Configure Port C LCD Output pins as alternate function */ 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 \
                                 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |GPIO_Pin_11 ;                               
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOC, &GPIO_InitStructure);  

  /* Select LCD alternate function for Port B LCD Output pins */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource1,GPIO_AF_LCD) ; 
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource2,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource3,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10,GPIO_AF_LCD) ; 
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11,GPIO_AF_LCD) ;  
  
  /* Configure ADC (IDD_MEASURE) pin as Analogue */
  GPIO_InitStructure.GPIO_Pin = IDD_MEASURE  ;                               
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
  GPIO_Init( IDD_MEASURE_PORT, &GPIO_InitStructure);
}  

/**
  * @brief  Inserts a delay time.
  * @param  nTime: specifies the delay time length, in 10 ms.
  * @retval None
  */
void Delay(uint32_t nTime)
{
  TimingDelay = nTime;
  while(TimingDelay != 0); 
}

/**
  * @brief  Decrements the TimingDelay variable.
  * @caller SysTick interrupt Handler 
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
  if (TimingDelay != 0x00)
    TimingDelay--;
}

#ifdef  USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* Infinite loop */
  while (1);
}

#endif

/******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
